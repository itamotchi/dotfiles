
((digest . "d64f657f62fdaef55321fbd765d87a80") (undo-list nil (8134 . 8167) nil (#("// すべてのDOM要素が読み込まれた時点で実行する関数を登録する" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 33 (fontified t face font-lock-comment-face)) . 8134) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8428) . -1) ((marker . 8428) . -1) ((marker) . -1) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8168) . -1) ((marker . 8168) . -1) ((marker) . -1) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8428) . -1) ((marker . 8428) . -1) ((marker) . -1) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8168) . -1) ((marker . 8168) . -1) ((marker) . -1) nil (#("      old_f.apply(this" 0 18 (fontified t) 18 22 (fontified t face font-lock-constant-face)) . 8134) ((marker) . -22) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8428) . -1) ((marker . 8428) . -1) ((marker) . -1) nil (#("    new_f = function () {" 0 4 (fontified t) 4 12 (fontified t) 12 20 (fontified t face font-lock-keyword-face) 20 24 (fontified t) 24 25 (fontified t js--pstate ((nil 0 function 8138 ("new_f") nil) (((nil 0 function 7288 ("extendDeep") 7746) (((nil 2 function 7126 t 7264) (nil 2 function 7097 ("F") 7115)) 1 function 7077 t 7266) (nil 0 function 4105 ("is_member") 4243) (((nil 3 function 3509 ("setCarret") 3834) (nil 3 function 3334 ("extendSiblings") 3503) (nil 3 function 3145 ("set") 3328) (nil 3 function 2818 ("element") 3139)) 1 function 2695 t 3841) (((nil 0 function 7897 ("MY" "defineMethod") 8131) (((((nil 1 function 7853 ("this" "stop") 7892) (nil 1 function 7810 ("this" "start") 7850)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 0 function 7750 ("MY" "Indicator") 7894) (((((((nil 3 function 6768 t 6896)) 1 function 6636 ("this" "parse") 7056) (((nil 3 function 6521 t 6625)) 1 function 6311 ("this" "stringify") 6631)) nil (:name "[Automatically Generated Class]") nil "this" nil) (nil 1 function 6104 ("doubleDigit") 6306) (nil 4 function 6044 ("getProcessor") 6096) (nil 4 function 5934 ("getProcessor") 5987) (nil 4 function 5827 ("getProcessor") 5880) (nil 4 function 5720 ("getProcessor") 5773) (nil 4 function 5615 ("getProcessor") 5668) (nil 4 function 5519 ("setProcessor") 5563) (nil 4 function 5451 ("getProcessor") 5508) (nil 1 function 5183 ("makeSpecifer") 5319) (((nil 2 function 5148 t 5174) (nil 2 function 5075 t 5101) (((nil 2 function 4920 ("this" "setValue") 5028) (nil 2 function 4805 ("this" "getValue") 4914)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 1 function 4721 ("Specifer") 5179)) 0 function 4481 ("MY" "DateConverter") 7059) (((nil 2 function 4326 ("indexOf") 4468)) 0 function 4246 ("MY" "indexOf") 4478) (nil 0 function 3855 ("MY" "stripTag") 4087) (nil 0 function 2587 ("MY" "htmlToText") 2691) (nil 0 function 2505 ("MY" "len") 2585) (((nil 1 function 2449 t 2499) (nil 1 function 2384 t 2429)) 0 function 2304 ("MY" "makeCallback") 2502) (nil 0 function 2077 ("MY" "is_number") 2301) (nil 0 function 1991 ("MY" "is_empty") 2075) (((((nil 4 function 1853 t 1980)) 3 function 1723 t 1982) (((nil 1 function 1477 ("pub" "bindHook") 1671)) nil (:name "[Automatically Generated Class]") nil "pub" nil) (nil 1 function 1394 ("register") 1474)) 0 function 1345 ("MY" "roleOfPublisher") 1988) (((((nil 1 function 920 ("this" "each") 1339)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 0 function 888 ("MY" "Iterator") 1342) (nil 0 function 780 ("MY" "except") 885) (nil 0 function 218 ("MY" "foreach") 777)) nil (:name "[Automatically Generated Class]") nil "MY" nil) (nil 0 function 168 ("cdr") 216) (nil 0 function 135 ("car") 167)) -2305843009213693952 toplevel nil nil nil)))) . 8134) ((marker) . -25) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8168) . -1) ((marker . 8168) . -1) ((marker) . -1) nil (#("      old_f = this[method];" 0 14 (fontified t) 14 18 (fontified t face font-lock-constant-face) 18 27 (fontified t)) . 8134) ((marker) . -27) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8428) . -1) ((marker . 8428) . -1) ((marker) . -1) nil (#("    if (typeof this[method] === 'function')" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 19 (fontified t face font-lock-constant-face) 19 32 (fontified t) 32 42 (fontified t face font-lock-string-face) 42 43 (fontified t)) . 8134) ((marker) . -43) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8168) . -1) ((marker . 8168) . -1) ((marker . 8134) . -1) ((marker) . -1) nil (#("  else {" 0 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 8 (fontified t)) . 8134) ((marker) . -8) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8428) . -1) ((marker . 8428) . -1) ((marker) . -1) nil (#("  var old_f, new_f;" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-variable-name-face) 11 13 (fontified t) 13 18 (fontified t face font-lock-variable-name-face) 18 19 (fontified t)) . 8134) ((marker) . -19) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8168) . -1) ((marker . 8168) . -1) ((marker) . -1) nil (#("      MY.hookMethod(key, arguments[0][key]);" 0 25 (fontified t) 25 34 (fontified t face font-lock-constant-face) 34 44 (fontified t)) . 8134) ((marker) . -44) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8428) . -1) ((marker . 8428) . -1) ((marker) . -1) nil (#("    for (var key in arguments[0])" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t) 17 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 29 (fontified t face font-lock-constant-face) 29 33 (fontified t)) . 8134) ((marker) . -33) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8168) . -1) ((marker . 8168) . -1) ((marker) . -1) nil (#("  if (arguments.length === 1)" 0 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 6 (fontified t) 6 15 (fontified t face font-lock-constant-face) 15 29 (fontified t)) . 8134) ((marker) . -29) nil (#("
" 0 1 (fontified t)) . 8134) ((marker . 8428) . -1) ((marker . 8428) . -1) ((marker) . -1) nil (#("MY.addMethod = function (method, implementation) {" 0 15 (fontified t) 15 23 (fontified t face font-lock-keyword-face) 23 25 (fontified t) 25 31 (fontified t face font-lock-variable-name-face) 31 33 (fontified t) 33 47 (fontified t face font-lock-variable-name-face) 47 49 (fontified t) 49 50 (fontified t js--pstate ((nil 0 function 8134 ("MY" "addMethod") nil) (((nil 0 function 7288 ("extendDeep") 7746) (((nil 2 function 7126 t 7264) (nil 2 function 7097 ("F") 7115)) 1 function 7077 t 7266) (nil 0 function 4105 ("is_member") 4243) (((nil 3 function 3509 ("setCarret") 3834) (nil 3 function 3334 ("extendSiblings") 3503) (nil 3 function 3145 ("set") 3328) (nil 3 function 2818 ("element") 3139)) 1 function 2695 t 3841) (((nil 0 function 7897 ("MY" "defineMethod") 8131) (((((nil 1 function 7853 ("this" "stop") 7892) (nil 1 function 7810 ("this" "start") 7850)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 0 function 7750 ("MY" "Indicator") 7894) (((((((nil 3 function 6768 t 6896)) 1 function 6636 ("this" "parse") 7056) (((nil 3 function 6521 t 6625)) 1 function 6311 ("this" "stringify") 6631)) nil (:name "[Automatically Generated Class]") nil "this" nil) (nil 1 function 6104 ("doubleDigit") 6306) (nil 4 function 6044 ("getProcessor") 6096) (nil 4 function 5934 ("getProcessor") 5987) (nil 4 function 5827 ("getProcessor") 5880) (nil 4 function 5720 ("getProcessor") 5773) (nil 4 function 5615 ("getProcessor") 5668) (nil 4 function 5519 ("setProcessor") 5563) (nil 4 function 5451 ("getProcessor") 5508) (nil 1 function 5183 ("makeSpecifer") 5319) (((nil 2 function 5148 t 5174) (nil 2 function 5075 t 5101) (((nil 2 function 4920 ("this" "setValue") 5028) (nil 2 function 4805 ("this" "getValue") 4914)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 1 function 4721 ("Specifer") 5179)) 0 function 4481 ("MY" "DateConverter") 7059) (((nil 2 function 4326 ("indexOf") 4468)) 0 function 4246 ("MY" "indexOf") 4478) (nil 0 function 3855 ("MY" "stripTag") 4087) (nil 0 function 2587 ("MY" "htmlToText") 2691) (nil 0 function 2505 ("MY" "len") 2585) (((nil 1 function 2449 t 2499) (nil 1 function 2384 t 2429)) 0 function 2304 ("MY" "makeCallback") 2502) (nil 0 function 2077 ("MY" "is_number") 2301) (nil 0 function 1991 ("MY" "is_empty") 2075) (((((nil 4 function 1853 t 1980)) 3 function 1723 t 1982) (((nil 1 function 1477 ("pub" "bindHook") 1671)) nil (:name "[Automatically Generated Class]") nil "pub" nil) (nil 1 function 1394 ("register") 1474)) 0 function 1345 ("MY" "roleOfPublisher") 1988) (((((nil 1 function 920 ("this" "each") 1339)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 0 function 888 ("MY" "Iterator") 1342) (nil 0 function 780 ("MY" "except") 885) (nil 0 function 218 ("MY" "foreach") 777)) nil (:name "[Automatically Generated Class]") nil "MY" nil) (nil 0 function 168 ("cdr") 216) (nil 0 function 135 ("car") 167)) -2305843009213693952 toplevel nil nil nil)))) . 8134) ((marker) . -50) nil (8438 . 8443) nil (8427 . 8438) nil (8421 . 8427) nil (8420 . 8421) nil (8419 . 8420) nil (8418 . 8419) nil (8417 . 8418) nil (8416 . 8417) nil (8402 . 8416) nil (#(" " 0 1 (fontified t)) . -8402) nil (8399 . 8403) nil (8376 . 8378) nil (8312 . 8313) nil (8305 . 8312) nil (8303 . 8305) nil (#(";" 0 1 (fontified t)) . -8303) nil (#("n" 0 1 (fontified t)) . -8388) nil (#("e" 0 1 (fontified t)) . -8389) nil (#("w" 0 1 (fontified t face font-lock-keyword-face)) . -8390) nil (8388 . 8391) nil (8390 . 8391) nil (8389 . 8390) nil (8388 . 8389) nil (8382 . 8383) nil (8374 . 8382) nil (#("." 0 1 (fontified t)) . -8374) nil (8364 . 8375) nil (8358 . 8364) nil (8357 . 8358) nil (8303 . 8304) nil (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -8303) nil (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -8304) nil (8300 . 8305) nil (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -8300) nil (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -8301) nil (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -8302) nil (8300 . 8303) nil (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -8300) nil (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -8301) nil (8296 . 8302) nil (8294 . 8296) nil (8293 . 8294) nil (8345 . 8346) nil (#(" " 0 1 (fontified t)) . -8345) nil (8330 . 8346) nil (8310 . 8330) nil (8307 . 8310) nil (8303 . 8307) nil (#("    this.prototype." 0 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t) 9 18 (fontified t face font-lock-constant-face) 18 19 (fontified t)) . 8303) ((marker . 8134) . -19) nil (8136 . 8140) nil (#("k" 0 1 (fontified t)) . 8136) nil (#("." 0 1 (fontified t)) . -8136) nil (#("a" 0 1 (fontified t)) . -8137) nil (8137 . 8138) nil (#("o" 0 1 (fontified t)) . 8137) nil (#("o" 0 1 (fontified t)) . 8137) nil (#("h" 0 1 (fontified t)) . 8137) nil (8322 . 8323) nil (#("[" 0 1 (fontified t)) . -8322) nil (8312 . 8323) nil (#("[" 0 1 (fontified t)) . -8312) nil (8312 . 8313) nil (#("." 0 1 (fontified t)) . -8312) nil (8308 . 8313) nil (8304 . 8308) nil (8303 . 8304) nil (8302 . 8303) nil (8297 . 8302) nil (8295 . 8297) nil (8294 . 8295) nil (8293 . 8294) nil (8292 . 8293) nil (8287 . 8292) nil (8273 . 8287) nil (8269 . 8273) nil (8256 . 8269) nil (8250 . 8256) nil (8249 . 8250) nil (8248 . 8249) nil (8244 . 8248) nil (8224 . 8244) nil (8220 . 8224) nil (8216 . 8220) nil (8215 . 8216) nil (8214 . 8215) nil (8211 . 8214) nil (8191 . 8211) nil (8188 . 8191) nil (8186 . 8188) nil (8185 . 8186) nil (8184 . 8185) nil (8183 . 8184) nil (8182 . 8183) nil (8177 . 8182) nil (#("s" 0 1 (fontified t face font-lock-keyword-face)) . -8177) nil (8166 . 8178) nil (8160 . 8166) nil (#("
" 0 1 (fontified t)) . 8130) ((marker . 8428) . -1) ((marker . 8428) . -1) nil (#("  }" 0 2 (fontified t) 2 3 (fontified t js--pend (nil 0 function 7897 ("MY" "defineMethod") 8131))) . 8130) nil (#("
" 0 1 (fontified t)) . 8130) ((marker . 8133) . -1) ((marker . 8133) . -1) nil (#("    return this;" 0 4 (fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 15 (fontified t face font-lock-constant-face) 15 16 (fontified t)) . 8130) nil (#("
" 0 1 (fontified t)) . 8130) ((marker . 8428) . -1) ((marker . 8428) . -1) nil (#("        this.prototype[key] = method[key];" 0 8 (fontified t) 8 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 22 (fontified t face font-lock-constant-face) 22 30 (fontified t) 30 36 (fontified t) 36 42 (fontified t)) . 8130) nil (#("
" 0 1 (fontified t)) . 8130) ((marker . 8133) . -1) ((marker . 8133) . -1) nil (#("      if (typeof method[key] === 'function') " 0 6 (fontified t) 6 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t) 17 23 (fontified t) 23 33 (fontified t) 33 43 (fontified t face font-lock-string-face) 43 45 (fontified t)) . 8130) nil (#("
" 0 1 (fontified t)) . 8130) ((marker . 8428) . -1) ((marker . 8428) . -1) nil (#("    for (var key in method) " 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t) 17 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 26 (fontified t) 26 28 (fontified t)) . 8130) nil (#("
" 0 1 (fontified t)) . 8130) ((marker . 8133) . -1) ((marker . 8133) . -1) nil (#("  } else if (typeof method === 'object') {" 0 2 (fontified t) 2 3 (fontified t js--pend (nil 0 function 7897 ("MY" "defineMethod") 8131)) 3 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 13 (fontified t) 13 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 26 (fontified t) 26 31 (fontified t) 31 39 (fontified t face font-lock-string-face) 39 42 (fontified t)) . 8130) nil (#(" " 0 1 (fontified t)) . 8022) nil (#("return" 0 6 (fontified t face font-lock-keyword-face)) . 8022) nil (8022 . 8029) nil (#("  " 0 2 (fontified t)) . -8117) 8131 nil (8089 . 8095) nil (#("a" 0 1 (fontified t)) . -8089) nil (#("r" 0 1 (fontified t)) . -8090) nil (#("g" 0 1 (fontified t)) . -8091) nil (#("u" 0 1 (fontified t)) . -8092) nil (#("e" 0 1 (fontified t)) . -8093) nil (#("m" 0 1 (fontified t)) . -8094) nil (#("t" 0 1 (fontified t)) . -8095) nil (8089 . 8096) nil (#("method" 0 6 (fontified t)) . 8089) nil (8065 . 8069) nil (8063 . 8065) nil (#("  if (typeof method === 'string') {" 0 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 6 (fontified t) 6 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 19 (fontified t) 19 24 (fontified t) 24 32 (fontified t face font-lock-string-face) 32 34 (fontified t) 34 35 (fontified t)) . 8063) nil (#("
" 0 1 (fontified t)) . 8063) ((marker . 8428) . -1) ((marker . 8428) . -1) nil (8062 . 8063) nil (8061 . 8062) nil (8060 . 8061) nil (8055 . 8060) nil (8053 . 8055) nil (#("-" 0 1 (fontified t)) . -8053) nil (8041 . 8054) nil (8037 . 8041) nil (8022 . 8037) nil (8016 . 8022) nil (8015 . 8016) nil (8014 . 8015) nil (8013 . 8014) nil (8005 . 8013) nil (#("e" 0 1 (fontified t)) . -8005) nil (#("m" 0 1 (fontified t)) . -8006) nil (7989 . 8007) nil (7985 . 7989) nil (7981 . 7985) nil (#("    foreach(arguments[0], function" 0 4 (fontified t) 4 12 (fontified t) 12 21 (fontified t face font-lock-constant-face) 21 26 (fontified t) 26 34 (fontified t face font-lock-keyword-face)) . 7981) nil (8005 . 8015) nil (#(")" 0 1 (fontified t)) . -8005) ((marker*) . 1) ((marker) . -1) nil (8005 . 8006) nil (7992 . 8005) nil (7985 . 7992) nil (7981 . 7985) nil (7980 . 7981) nil (7979 . 7980) nil (7961 . 7979) nil (#("e" 0 1 (fontified t)) . -7961) nil (#("m" 0 1 (fontified t)) . -7962) nil (7956 . 7963) nil (7953 . 7956) nil (7951 . 7953) nil (7950 . 7951) nil (#("
" 0 1 (fontified t)) . 7987) ((marker . 7951) . -1) ((marker . 7951) . -1) nil (#("    if (typeof this" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 19 (fontified t face font-lock-constant-face)) . 7987) nil (7994 . 8006) nil (7991 . 7994) nil (7987 . 7991) nil (7986 . 7987) nil (7976 . 7982) nil (#("function" 0 8 (fontified t face font-lock-string-face)) . 7976) nil (7925 . 7931) nil (#("arg1" 0 4 (fontified t face font-lock-variable-name-face)) . 7925) nil (7962 . 7968) nil (#("arg1" 0 4 (fontified t)) . 7962) nil (8004 . 8010) nil (#("arg1" 0 4 (fontified t)) . 8004) nil (8065 . 8071) nil (#("arg1" 0 4 (fontified t)) . 8065) nil (8106 . 8112) nil (#("arg1" 0 4 (fontified t)) . 8106) nil (8130 . 8136) nil (#("arg1" 0 4 (fontified t)) . 8130) nil (8187 . 8193) nil (#("arg1" 0 4 (fontified t)) . 8187) nil (#("arg1" 0 4 (fontified t face font-lock-variable-name-face)) . 8249) nil (#(", implementation" 0 2 (fontified t) 2 16 (fontified t face font-lock-variable-name-face)) . 8253) nil (#(")" 0 1 (fontified t)) . 8269) ((marker*) . 1) ((marker) . -1) nil (#(" " 0 1 (fontified t)) . 8270) nil (#("{" 0 1 (fontified t js--pstate ((nil 0 function 8223 ("MY" "hookMethod") 8275) (((nil 0 function 7288 ("extendDeep") 7746) (((nil 2 function 7126 t 7264) (nil 2 function 7097 ("F") 7115)) 1 function 7077 t 7266) (nil 0 function 4105 ("is_member") 4243) (((nil 3 function 3509 ("setCarret") 3834) (nil 3 function 3334 ("extendSiblings") 3503) (nil 3 function 3145 ("set") 3328) (nil 3 function 2818 ("element") 3139)) 1 function 2695 t 3841) (((nil 0 function 7897 ("MY" "defineMethod") nil) (((((nil 1 function 7853 ("this" "stop") 7892) (nil 1 function 7810 ("this" "start") 7850)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 0 function 7750 ("MY" "Indicator") 7894) (((((((nil 3 function 6768 t 6896)) 1 function 6636 ("this" "parse") 7056) (((nil 3 function 6521 t 6625)) 1 function 6311 ("this" "stringify") 6631)) nil (:name "[Automatically Generated Class]") nil "this" nil) (nil 1 function 6104 ("doubleDigit") 6306) (nil 4 function 6044 ("getProcessor") 6096) (nil 4 function 5934 ("getProcessor") 5987) (nil 4 function 5827 ("getProcessor") 5880) (nil 4 function 5720 ("getProcessor") 5773) (nil 4 function 5615 ("getProcessor") 5668) (nil 4 function 5519 ("setProcessor") 5563) (nil 4 function 5451 ("getProcessor") 5508) (nil 1 function 5183 ("makeSpecifer") 5319) (((nil 2 function 5148 t 5174) (nil 2 function 5075 t 5101) (((nil 2 function 4920 ("this" "setValue") 5028) (nil 2 function 4805 ("this" "getValue") 4914)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 1 function 4721 ("Specifer") 5179)) 0 function 4481 ("MY" "DateConverter") 7059) (((nil 2 function 4326 ("indexOf") 4468)) 0 function 4246 ("MY" "indexOf") 4478) (nil 0 function 3855 ("MY" "stripTag") 4087) (nil 0 function 2587 ("MY" "htmlToText") 2691) (nil 0 function 2505 ("MY" "len") 2585) (((nil 1 function 2449 t 2499) (nil 1 function 2384 t 2429)) 0 function 2304 ("MY" "makeCallback") 2502) (nil 0 function 2077 ("MY" "is_number") 2301) (nil 0 function 1991 ("MY" "is_empty") 2075) (((((nil 4 function 1853 t 1980)) 3 function 1723 t 1982) (((nil 1 function 1477 ("pub" "bindHook") 1671)) nil (:name "[Automatically Generated Class]") nil "pub" nil) (nil 1 function 1394 ("register") 1474)) 0 function 1345 ("MY" "roleOfPublisher") 1988) (((((nil 1 function 920 ("this" "each") 1339)) nil (:name "[Automatically Generated Class]") nil "this" nil)) 0 function 888 ("MY" "Iterator") 1342) (nil 0 function 780 ("MY" "except") 885) (nil 0 function 218 ("MY" "foreach") 777)) nil (:name "[Automatically Generated Class]") nil "MY" nil) (nil 0 function 168 ("cdr") 216) (nil 0 function 135 ("car") 167)) -2305843009213693952 toplevel nil nil nil)))) . 8271) nil (#("
" 0 1 (fontified t)) . 8272) ((marker . 8063) . -1) ((marker . 8063) . -1) nil (#("
" 0 1 (fontified t)) . 8273) ((marker . 8353) . -1) ((marker . 8353) . -1) nil (#("}" 0 1 (fontified t js--pend (nil 0 function 8223 ("MY" "hookMethod") 8275))) . 8274) ((marker*) . 1) ((marker) . -1) nil (#(";" 0 1 (fontified t)) . 8275) nil (#("  " 0 2 (fontified t)) . 8273) nil (#("for " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 8275) nil (#("(var key in arg1" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 16 (fontified t)) . 8279) nil (#(")" 0 1 (fontified t)) . 8295) ((marker*) . 1) ((marker) . -1) nil (#("
" 0 1 (fontified t)) . 8296) ((marker . 7951) . -1) ((marker . 7951) . -1) nil (#("    " 0 4 (fontified t)) . 8297) nil (#("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 8301) nil (#("(typeof arg1[key]" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 17 (fontified t)) . 8304) nil (8297 . 8321) nil (#("    if (typeof arg1[key]" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 24 (fontified t)) . 8297) nil (8304 . 8321) nil (8301 . 8304) nil (8297 . 8301) nil (8296 . 8297) nil (8295 . 8296) nil (8279 . 8295) nil (8275 . 8279) nil (8273 . 8275) nil (8275 . 8276) nil (8274 . 8275) nil (8273 . 8274) nil (8272 . 8273) nil (8271 . 8272) nil (8270 . 8271) nil (8269 . 8270) nil (8253 . 8269) nil (8249 . 8253) nil (8187 . 8191) nil (#("method" 0 6 (fontified t)) . 8187) nil (8130 . 8134) nil (#("method" 0 6 (fontified t)) . 8130) nil (8106 . 8110) nil (#("method" 0 6 (fontified t)) . 8106) nil (8065 . 8069) nil (#("method" 0 6 (fontified t)) . 8065) nil (8004 . 8008) nil (#("method" 0 6 (fontified t)) . 8004) nil (7962 . 7966) nil (#("method" 0 6 (fontified t)) . 7962) nil (7925 . 7929) nil (#("method" 0 6 (fontified t face font-lock-variable-name-face)) . 7925) nil (8262 . 8263) nil (8253 . 8262) nil (#("u" 0 1 (fontified t)) . -8253) nil (#("f" 0 1 (fontified t)) . -8254) nil (#("n" 0 1 (fontified t)) . -8255) nil (8236 . 8256) nil (8235 . 8236) nil (#("
" 0 1 (fontified t)) . 218) ((marker . 8346) . -1) ((marker . 8346) . -1) nil (#("
" 0 1 (fontified t)) . 218) ((marker . 7685) . -1) ((marker . 7685) . -1) nil (#("}" 0 1 (fontified t)) . 218) nil (#("
" 0 1 (fontified t)) . 218) ((marker . 8346) . -1) ((marker . 8346) . -1) nil (#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 218) ((marker . 7685) . -3) ((marker . 7685) . -3) ((marker . 8134) . -2) nil (#("
" 0 1 (fontified t)) . 218) ((marker . 8346) . -1) ((marker . 8346) . -1) nil (#("MY.hookMethod = function (obj) {" 0 16 (fontified t) 16 24 (fontified t face font-lock-keyword-face) 24 26 (fontified t) 26 29 (fontified t face font-lock-variable-name-face) 29 31 (fontified t) 31 32 (fontified t js--pstate ((nil 0 function 218 ("MY" "hookMethod") nil) (((nil 0 function 168 ("cdr") 216) (nil 0 function 135 ("car") 167)) -2305843009213693952 toplevel nil nil nil)))) . 218) nil (244 . 247) nil (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -244) nil (221 . 231) nil (#("hook" 0 4 (fontified t)) . 221) nil (243 . 245) nil (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -239) nil (246 . 247) nil (245 . 246) nil (244 . 245) nil (243 . 244) nil (242 . 243) nil (241 . 242) nil (240 . 241) nil (237 . 240) nil (217 . 237) nil (216 . 217) (t 20619 . 45661) nil (7247 . 7248) (t 20619 . 36579) nil (#("
" 0 1 (fontified t)) . 218) nil (#("
" 0 1 (fontified t)) . 218) nil (#("    fn" 0 6 (fontified t)) . 218) nil (#("
" 0 1 (fontified t)) . 218) nil (#("  for (var i = 0; i < array.length; i++)" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 40 (fontified t)) . 218) nil (#("
" 0 1 (fontified t)) . 218) nil (#("MY.map = function (fn, array) {" 0 9 (fontified t) 9 17 (face font-lock-keyword-face fontified t) 17 19 (fontified t) 19 21 (face font-lock-variable-name-face fontified t) 21 23 (fontified t) 23 28 (face font-lock-variable-name-face fontified t) 28 30 (fontified t) 30 31 (js--pstate ((nil 0 function 218 ("MY" "map") nil) (((nil 0 function 168 ("cdr") 216) (nil 0 function 135 ("car") 167)) -2305843009213693952 toplevel nil nil nil)) fontified t)) . 218) nil (535 . 541) nil (522 . 528) nil (295 . 297) nil (291 . 295) nil (290 . 291) nil (289 . 290) nil (284 . 289) nil (277 . 284) nil (#(":" 0 1 (fontified t)) . -277) nil (#("l" 0 1 (fontified t)) . -278) nil (277 . 279) nil (266 . 277) nil (256 . 266) nil (252 . 256) nil (250 . 252) nil (249 . 250) nil (248 . 249) nil (247 . 248) nil (246 . 247) nil (241 . 246) nil (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -241) nil (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -242) nil (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -243) nil (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -244) nil (241 . 245) nil (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -241) nil (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -242) nil (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -243) nil (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -244) nil (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -245) nil (#(")" 0 1 (fontified t)) . -246) nil (#(" " 0 1 (fontified t)) . -247) nil (247 . 248) nil (246 . 247) nil (239 . 246) nil (236 . 239) nil (#("8" 0 1 (fontified t)) . -236) nil (221 . 237) nil (#("a" 0 1 (fontified t)) . -221) nil (220 . 222) (#("。" 0 1 (fontified t)) . -220) (217 . 221) nil (216 . 217) nil (#("
" 0 1 (fontified t)) . 518) nil (#("      else if (typeof arg2 === '" 0 6 (fontified t) 6 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 13 (face font-lock-keyword-face fontified t) 13 15 (fontified t) 15 21 (face font-lock-keyword-face fontified t) 21 31 (fontified t) 31 32 (face font-lock-string-face fontified t)) . 518) nil (#("
" 0 1 (fontified t)) . 356) nil (#("    // 2. 配列の個々の要素が関数である場合、" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 10 (face font-lock-comment-face fontified t) 10 27 (face font-lock-comment-face fontified t)) . 356) nil (#("
" 0 1 (fontified t)) . 356) nil (#("    // 1. 第２引数が関数なら、配列の個々の要素を'this'として配列を呼び出す" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 10 (face font-lock-comment-face fontified t) 10 29 (face font-lock-comment-face fontified t) 29 35 (face font-lock-comment-face fontified t) 35 45 (face font-lock-comment-face fontified t)) . 356) nil (#("
" 0 1 (fontified t)) . 356) nil (#("    // 第一引数が配列の場合、" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 18 (face font-lock-comment-face fontified t)) . 356) nil (428 . 431) nil (382 . 385) nil (#("１" 0 1 (face font-lock-comment-face fontified t)) . -382) (382 . 383) (#("１。" 0 2 (face font-lock-comment-face fontified t)) . -382) (382 . 384) (#("１" 0 1 (face font-lock-comment-face fontified t)) . -382) (382 . 383) 442 nil (#("、" 0 1 (face font-lock-comment-face fontified t)) . 425) nil (#("に" 0 1 (face font-lock-comment-face fontified t)) . 425) nil (#("次" 0 1 (face font-lock-comment-face fontified t)) . 425) nil (381 . 382) nil (375 . 379) 377 nil (374 . 377) nil (#("ま" 0 1 (face font-lock-comment-face fontified t)) . -374) nil (#("ず" 0 1 (face font-lock-comment-face fontified t)) . -375) nil (#("、" 0 1 (face font-lock-comment-face fontified t)) . -376) nil (439 . 440) (#("、" 0 1 (face font-lock-comment-face fontified t)) . -439) (432 . 440) (#("関数である場合" 0 7 (face font-lock-comment-face fontified t)) . -432) (432 . 439) (#("かんすうであるばあい" 0 10 (face font-lock-comment-face fontified t)) . -432) (432 . 442) (#("かんすうであるばあ" 0 9 (face font-lock-comment-face fontified t)) . -432) (432 . 441) (#("かんすうであるば" 0 8 (face font-lock-comment-face fontified t)) . -432) (432 . 440) (#("かんすうであるb" 0 8 (face font-lock-comment-face fontified t)) . -432) (432 . 440) (#("かんすうである" 0 7 (face font-lock-comment-face fontified t)) . -432) (432 . 439) (#("かんすうであるあ" 0 8 (face font-lock-comment-face fontified t)) . -432) (432 . 440) (#("かんすうである" 0 7 (face font-lock-comment-face fontified t)) . -432) (432 . 439) (#("かんすうであr" 0 7 (face font-lock-comment-face fontified t)) . -432) (432 . 439) (#("かんすうであ" 0 6 (face font-lock-comment-face fontified t)) . -432) (432 . 438) (#("かんすうであう" 0 7 (face font-lock-comment-face fontified t)) . -432) (432 . 439) (#("かんすうであ" 0 6 (face font-lock-comment-face fontified t)) . -432) (432 . 438) (#("かんすうで" 0 5 (face font-lock-comment-face fontified t)) . -432) (432 . 437) (#("かんすうd" 0 5 (face font-lock-comment-face fontified t)) . -432) (432 . 437) (#("かんすう" 0 4 (face font-lock-comment-face fontified t)) . -432) (432 . 436) (#("かんす" 0 3 (face font-lock-comment-face fontified t)) . -432) (432 . 435) (#("かんs" 0 3 (face font-lock-comment-face fontified t)) . -432) (432 . 435) (#("かん" 0 2 (face font-lock-comment-face fontified t)) . -432) (432 . 434) (#("かn" 0 2 (face font-lock-comment-face fontified t)) . -432) (432 . 434) (#("か" 0 1 (face font-lock-comment-face fontified t)) . -432) (432 . 433) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -432) (429 . 433) (#("要素が" 0 3 (face font-lock-comment-face fontified t)) . -429) (429 . 432) (#("ようそが" 0 4 (face font-lock-comment-face fontified t)) . -429) (429 . 433) (#("ようそg" 0 4 (face font-lock-comment-face fontified t)) . -429) (429 . 433) (#("ようそ" 0 3 (face font-lock-comment-face fontified t)) . -429) (429 . 432) (#("ようs" 0 3 (face font-lock-comment-face fontified t)) . -429) (429 . 432) (#("よう" 0 2 (face font-lock-comment-face fontified t)) . -429) (429 . 431) (#("よ" 0 1 (face font-lock-comment-face fontified t)) . -429) (429 . 430) (#("y" 0 1 (face font-lock-comment-face fontified t)) . -429) (426 . 430) (#("個々の" 0 3 (face font-lock-comment-face fontified t)) . -426) (426 . 429) (#("ここの" 0 3 (face font-lock-comment-face fontified t)) . -426) (426 . 429) (#("ここn" 0 3 (face font-lock-comment-face fontified t)) . -426) (426 . 429) (#("ここ" 0 2 (face font-lock-comment-face fontified t)) . -426) (426 . 428) (#("こk" 0 2 (face font-lock-comment-face fontified t)) . -426) (426 . 428) (#("こ" 0 1 (face font-lock-comment-face fontified t)) . -426) (426 . 427) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -426) (423 . 427) (#("配列の" 0 3 (face font-lock-comment-face fontified t)) . -423) (423 . 426) (#("はいれつの" 0 5 (face font-lock-comment-face fontified t)) . -423) (423 . 428) (#("はいれつn" 0 5 (face font-lock-comment-face fontified t)) . -423) (423 . 428) (#("はいれつ" 0 4 (face font-lock-comment-face fontified t)) . -423) (423 . 427) (#("はいれt" 0 4 (face font-lock-comment-face fontified t)) . -423) (423 . 427) (#("はいれ" 0 3 (face font-lock-comment-face fontified t)) . -423) (423 . 426) (#("はいr" 0 3 (face font-lock-comment-face fontified t)) . -423) (423 . 426) (#("はい" 0 2 (face font-lock-comment-face fontified t)) . -423) (423 . 425) (#("は" 0 1 (face font-lock-comment-face fontified t)) . -423) (423 . 424) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -423) (422 . 424) (#("、" 0 1 (face font-lock-comment-face fontified t)) . -422) (420 . 423) nil (#("次に" 0 2 (face font-lock-comment-face fontified t)) . -420) (420 . 422) (#("つぎに" 0 3 (face font-lock-comment-face fontified t)) . -420) (420 . 423) (#("つぎn" 0 3 (face font-lock-comment-face fontified t)) . -420) (420 . 423) (#("つぎ" 0 2 (face font-lock-comment-face fontified t)) . -420) (420 . 422) (#("つg" 0 2 (face font-lock-comment-face fontified t)) . -420) (420 . 422) (#("つ" 0 1 (face font-lock-comment-face fontified t)) . -420) (420 . 421) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -420) (420 . 421) (#("次" 0 1 (face font-lock-comment-face fontified t)) . -420) nil (#("に" 0 1 (face font-lock-comment-face fontified t)) . -421) nil (#("、" 0 1 (face font-lock-comment-face fontified t)) . -422) (420 . 423) (#("次に" 0 2 (face font-lock-comment-face fontified t)) . -420) (420 . 422) (#("つぎに" 0 3 (face font-lock-comment-face fontified t)) . -420) (420 . 423) (#("つぎn" 0 3 (face font-lock-comment-face fontified t)) . -420) (420 . 423) (#("つぎ" 0 2 (face font-lock-comment-face fontified t)) . -420) (420 . 422) (#("つg" 0 2 (face font-lock-comment-face fontified t)) . -420) (420 . 422) (#("つ" 0 1 (face font-lock-comment-face fontified t)) . -420) (420 . 421) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -420) (417 . 421) nil (413 . 417) nil (412 . 413) nil (408 . 412) (#("呼び出す" 0 4 (face font-lock-comment-face fontified t)) . -408) (408 . 412) (#("よびだす" 0 4 (face font-lock-comment-face fontified t)) . -408) (408 . 412) (#("よびだs" 0 4 (face font-lock-comment-face fontified t)) . -408) (408 . 412) (#("よびだ" 0 3 (face font-lock-comment-face fontified t)) . -408) (408 . 411) (#("よびd" 0 3 (face font-lock-comment-face fontified t)) . -408) (408 . 411) (#("よび" 0 2 (face font-lock-comment-face fontified t)) . -408) (408 . 410) (#("よb" 0 2 (face font-lock-comment-face fontified t)) . -408) (408 . 410) (#("よ" 0 1 (face font-lock-comment-face fontified t)) . -408) (408 . 409) (#("y" 0 1 (face font-lock-comment-face fontified t)) . -408) (407 . 409) (#("を" 0 1 (face font-lock-comment-face fontified t)) . -407) (407 . 408) (#("w" 0 1 (face font-lock-comment-face fontified t)) . -407) (405 . 408) (#("配列" 0 2 (face font-lock-comment-face fontified t)) . -405) (405 . 407) (#("はいれつ" 0 4 (face font-lock-comment-face fontified t)) . -405) (405 . 409) (#("はいれt" 0 4 (face font-lock-comment-face fontified t)) . -405) (405 . 409) (#("はいれ" 0 3 (face font-lock-comment-face fontified t)) . -405) (405 . 408) (#("はいr" 0 3 (face font-lock-comment-face fontified t)) . -405) (405 . 408) (#("はい" 0 2 (face font-lock-comment-face fontified t)) . -405) (405 . 407) (#("は" 0 1 (face font-lock-comment-face fontified t)) . -405) (405 . 406) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -405) (405 . 406) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -405) (402 . 406) (#("として" 0 3 (face font-lock-comment-face fontified t)) . -402) (402 . 405) (#("としt" 0 3 (face font-lock-comment-face fontified t)) . -402) (402 . 405) (#("とし" 0 2 (face font-lock-comment-face fontified t)) . -402) (402 . 404) (#("とs" 0 2 (face font-lock-comment-face fontified t)) . -402) (402 . 404) (#("と" 0 1 (face font-lock-comment-face fontified t)) . -402) (402 . 403) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -402) (397 . 403) nil (#("h" 0 1 (face font-lock-comment-face fontified t)) . -397) nil (#("i" 0 1 (face font-lock-comment-face fontified t)) . -398) nil (393 . 399) (#("要素を" 0 3 (face font-lock-comment-face fontified t)) . -393) (393 . 396) (#("ようそを" 0 4 (face font-lock-comment-face fontified t)) . -393) (393 . 397) (#("ようそw" 0 4 (face font-lock-comment-face fontified t)) . -393) (393 . 397) (#("ようそ" 0 3 (face font-lock-comment-face fontified t)) . -393) (393 . 396) (#("ようs" 0 3 (face font-lock-comment-face fontified t)) . -393) (393 . 396) (#("よう" 0 2 (face font-lock-comment-face fontified t)) . -393) (393 . 395) (#("よ" 0 1 (face font-lock-comment-face fontified t)) . -393) (393 . 394) (#("y" 0 1 (face font-lock-comment-face fontified t)) . -393) (390 . 394) (#("個々の" 0 3 (face font-lock-comment-face fontified t)) . -390) (390 . 393) (#("ここの" 0 3 (face font-lock-comment-face fontified t)) . -390) (390 . 393) (#("ここn" 0 3 (face font-lock-comment-face fontified t)) . -390) (390 . 393) (#("ここ" 0 2 (face font-lock-comment-face fontified t)) . -390) (390 . 392) (#("こk" 0 2 (face font-lock-comment-face fontified t)) . -390) (390 . 392) (#("こ" 0 1 (face font-lock-comment-face fontified t)) . -390) (390 . 391) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -390) (387 . 391) nil (#("配列の" 0 3 (face font-lock-comment-face fontified t)) . -387) (387 . 390) (#("はいれつの" 0 5 (face font-lock-comment-face fontified t)) . -387) (387 . 392) (#("はいれつn" 0 5 (face font-lock-comment-face fontified t)) . -387) (387 . 392) (#("はいれつ" 0 4 (face font-lock-comment-face fontified t)) . -387) (387 . 391) (#("はいれt" 0 4 (face font-lock-comment-face fontified t)) . -387) (387 . 391) (#("はいれ" 0 3 (face font-lock-comment-face fontified t)) . -387) (387 . 390) (#("はいr" 0 3 (face font-lock-comment-face fontified t)) . -387) (387 . 390) (#("はい" 0 2 (face font-lock-comment-face fontified t)) . -387) (387 . 389) (#("は" 0 1 (face font-lock-comment-face fontified t)) . -387) (387 . 388) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -387) (387 . 388) (#("第" 0 1 (face font-lock-comment-face fontified t)) . -387) nil (#("２" 0 1 (face font-lock-comment-face fontified t)) . -388) nil (#("引" 0 1 (face font-lock-comment-face fontified t)) . -389) nil (#("数" 0 1 (face font-lock-comment-face fontified t)) . -390) nil (#("を" 0 1 (face font-lock-comment-face fontified t)) . -391) nil (#("t" 0 1 (face font-lock-comment-face fontified t)) . -392) nil (#("h" 0 1 (face font-lock-comment-face fontified t)) . -393) nil (#("i" 0 1 (face font-lock-comment-face fontified t)) . -394) nil (#("s" 0 1 (face font-lock-comment-face fontified t)) . -395) nil (#("と" 0 1 (face font-lock-comment-face fontified t)) . -396) nil (#("し" 0 1 (face font-lock-comment-face fontified t)) . -397) nil (#("て" 0 1 (face font-lock-comment-face fontified t)) . -398) nil (#("k" 0 1 (face font-lock-comment-face fontified t)) . -399) (396 . 400) (#("として" 0 3 (face font-lock-comment-face fontified t)) . -396) (396 . 399) (#("としt" 0 3 (face font-lock-comment-face fontified t)) . -396) (396 . 399) (#("とし" 0 2 (face font-lock-comment-face fontified t)) . -396) (396 . 398) (#("とs" 0 2 (face font-lock-comment-face fontified t)) . -396) (396 . 398) (#("と" 0 1 (face font-lock-comment-face fontified t)) . -396) (396 . 397) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -396) (387 . 397) nil (#("第２引数を" 0 5 (face font-lock-comment-face fontified t)) . -387) (387 . 392) (#("だい２ひきすうを" 0 8 (face font-lock-comment-face fontified t)) . -387) (387 . 395) (#("だい２ひきすうw" 0 8 (face font-lock-comment-face fontified t)) . -387) (387 . 395) (#("だい２ひきすう" 0 7 (face font-lock-comment-face fontified t)) . -387) (387 . 394) (#("だい２ひきす" 0 6 (face font-lock-comment-face fontified t)) . -387) (387 . 393) (#("だい２ひきs" 0 6 (face font-lock-comment-face fontified t)) . -387) (387 . 393) (#("だい２ひき" 0 5 (face font-lock-comment-face fontified t)) . -387) (387 . 392) (#("だい２ひk" 0 5 (face font-lock-comment-face fontified t)) . -387) (387 . 392) (#("だい２ひ" 0 4 (face font-lock-comment-face fontified t)) . -387) (387 . 391) (#("だい２h" 0 4 (face font-lock-comment-face fontified t)) . -387) (387 . 391) (#("だい２" 0 3 (face font-lock-comment-face fontified t)) . -387) (387 . 390) (#("だい２に" 0 4 (face font-lock-comment-face fontified t)) . -387) (387 . 391) (#("だい２n" 0 4 (face font-lock-comment-face fontified t)) . -387) (387 . 391) (#("だい２" 0 3 (face font-lock-comment-face fontified t)) . -387) (387 . 390) (#("だい" 0 2 (face font-lock-comment-face fontified t)) . -387) (387 . 389) (#("だ" 0 1 (face font-lock-comment-face fontified t)) . -387) (387 . 388) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -387) (387 . 388) (#("その関数に引数を配列の個々の要素として適用する。" 0 24 (face font-lock-comment-face fontified t)) . 387) nil (410 . 411) (#("。" 0 1 (face font-lock-comment-face fontified t)) . -410) (406 . 411) (#("適用する" 0 4 (face font-lock-comment-face fontified t)) . -406) (406 . 410) (#("てきようする" 0 6 (face font-lock-comment-face fontified t)) . -406) (406 . 412) (#("てきようすr" 0 6 (face font-lock-comment-face fontified t)) . -406) (406 . 412) (#("てきようす" 0 5 (face font-lock-comment-face fontified t)) . -406) (406 . 411) (#("てきようs" 0 5 (face font-lock-comment-face fontified t)) . -406) (406 . 411) (#("てきよう" 0 4 (face font-lock-comment-face fontified t)) . -406) (406 . 410) (#("てきよ" 0 3 (face font-lock-comment-face fontified t)) . -406) (406 . 409) (#("てきy" 0 3 (face font-lock-comment-face fontified t)) . -406) (406 . 409) (#("てき" 0 2 (face font-lock-comment-face fontified t)) . -406) (406 . 408) (#("てきす" 0 3 (face font-lock-comment-face fontified t)) . -406) (406 . 409) (#("てきs" 0 3 (face font-lock-comment-face fontified t)) . -406) (406 . 409) (#("てき" 0 2 (face font-lock-comment-face fontified t)) . -406) (406 . 408) (#("てk" 0 2 (face font-lock-comment-face fontified t)) . -406) (406 . 408) (#("て" 0 1 (face font-lock-comment-face fontified t)) . -406) (406 . 407) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -406) (401 . 407) (#("要素として" 0 5 (face font-lock-comment-face fontified t)) . -401) (401 . 406) (#("ようそとして" 0 6 (face font-lock-comment-face fontified t)) . -401) (401 . 407) (#("ようそとしt" 0 6 (face font-lock-comment-face fontified t)) . -401) (401 . 407) (#("ようそとし" 0 5 (face font-lock-comment-face fontified t)) . -401) (401 . 406) (#("ようそとs" 0 5 (face font-lock-comment-face fontified t)) . -401) (401 . 406) (#("ようそと" 0 4 (face font-lock-comment-face fontified t)) . -401) (401 . 405) (#("ようそt" 0 4 (face font-lock-comment-face fontified t)) . -401) (401 . 405) (#("ようそ" 0 3 (face font-lock-comment-face fontified t)) . -401) (401 . 404) (#("ようs" 0 3 (face font-lock-comment-face fontified t)) . -401) (401 . 404) (#("よう" 0 2 (face font-lock-comment-face fontified t)) . -401) (401 . 403) (#("よ" 0 1 (face font-lock-comment-face fontified t)) . -401) (401 . 402) (#("y" 0 1 (face font-lock-comment-face fontified t)) . -401) (400 . 402) nil (398 . 400) (#("個々の" 0 3 (face font-lock-comment-face fontified t)) . -398) (398 . 401) (#("ここの" 0 3 (face font-lock-comment-face fontified t)) . -398) (398 . 401) (#("ここn" 0 3 (face font-lock-comment-face fontified t)) . -398) (398 . 401) (#("ここ" 0 2 (face font-lock-comment-face fontified t)) . -398) (398 . 400) (#("こk" 0 2 (face font-lock-comment-face fontified t)) . -398) (398 . 400) (#("こ" 0 1 (face font-lock-comment-face fontified t)) . -398) (398 . 399) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -398) (395 . 399) (#("配列の" 0 3 (face font-lock-comment-face fontified t)) . -395) (395 . 398) (#("はいれつの" 0 5 (face font-lock-comment-face fontified t)) . -395) (395 . 400) (#("はいれつn" 0 5 (face font-lock-comment-face fontified t)) . -395) (395 . 400) (#("はいれつ" 0 4 (face font-lock-comment-face fontified t)) . -395) (395 . 399) (#("はいれt" 0 4 (face font-lock-comment-face fontified t)) . -395) (395 . 399) (#("はいれ" 0 3 (face font-lock-comment-face fontified t)) . -395) (395 . 398) (#("はいr" 0 3 (face font-lock-comment-face fontified t)) . -395) (395 . 398) (#("はい" 0 2 (face font-lock-comment-face fontified t)) . -395) (395 . 397) (#("は" 0 1 (face font-lock-comment-face fontified t)) . -395) (395 . 396) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -395) (392 . 396) (#("引数を" 0 3 (face font-lock-comment-face fontified t)) . -392) (392 . 395) (#("ひきすうを" 0 5 (face font-lock-comment-face fontified t)) . -392) (392 . 397) (#("ひきすうw" 0 5 (face font-lock-comment-face fontified t)) . -392) (392 . 397) (#("ひきすう" 0 4 (face font-lock-comment-face fontified t)) . -392) (392 . 396) (#("ひきす" 0 3 (face font-lock-comment-face fontified t)) . -392) (392 . 395) (#("ひきs" 0 3 (face font-lock-comment-face fontified t)) . -392) (392 . 395) (#("ひき" 0 2 (face font-lock-comment-face fontified t)) . -392) (392 . 394) (#("ひk" 0 2 (face font-lock-comment-face fontified t)) . -392) (392 . 394) (#("ひ" 0 1 (face font-lock-comment-face fontified t)) . -392) (392 . 393) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -392) (389 . 393) (#("関数に" 0 3 (face font-lock-comment-face fontified t)) . -389) (389 . 392) (#("かんすうに" 0 5 (face font-lock-comment-face fontified t)) . -389) (389 . 394) (#("かんすうn" 0 5 (face font-lock-comment-face fontified t)) . -389) (389 . 394) (#("かんすう" 0 4 (face font-lock-comment-face fontified t)) . -389) (389 . 393) (#("かんすうの" 0 5 (face font-lock-comment-face fontified t)) . -389) (389 . 394) (#("かんすうn" 0 5 (face font-lock-comment-face fontified t)) . -389) (389 . 394) (#("かんすう" 0 4 (face font-lock-comment-face fontified t)) . -389) (389 . 393) (#("かんす" 0 3 (face font-lock-comment-face fontified t)) . -389) (389 . 392) (#("かんs" 0 3 (face font-lock-comment-face fontified t)) . -389) (389 . 392) (#("かん" 0 2 (face font-lock-comment-face fontified t)) . -389) (389 . 391) (#("かn" 0 2 (face font-lock-comment-face fontified t)) . -389) (389 . 391) (#("か" 0 1 (face font-lock-comment-face fontified t)) . -389) (389 . 390) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -389) (387 . 390) (#("その" 0 2 (face font-lock-comment-face fontified t)) . -387) (387 . 389) (#("そn" 0 2 (face font-lock-comment-face fontified t)) . -387) (387 . 389) (#("そ" 0 1 (face font-lock-comment-face fontified t)) . -387) (387 . 388) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -387) (386 . 388) (#("、" 0 1 (face font-lock-comment-face fontified t)) . -386) (382 . 387) (#("関数なら" 0 4 (face font-lock-comment-face fontified t)) . -382) (382 . 386) (#("かんすうなら" 0 6 (face font-lock-comment-face fontified t)) . -382) (382 . 388) (#("かんすうなr" 0 6 (face font-lock-comment-face fontified t)) . -382) (382 . 388) (#("かんすうな" 0 5 (face font-lock-comment-face fontified t)) . -382) (382 . 387) (#("かんすうn" 0 5 (face font-lock-comment-face fontified t)) . -382) (382 . 387) (#("かんすう" 0 4 (face font-lock-comment-face fontified t)) . -382) (382 . 386) (#("かんす" 0 3 (face font-lock-comment-face fontified t)) . -382) (382 . 385) (#("かんs" 0 3 (face font-lock-comment-face fontified t)) . -382) (382 . 385) (#("かん" 0 2 (face font-lock-comment-face fontified t)) . -382) (382 . 384) (#("かn" 0 2 (face font-lock-comment-face fontified t)) . -382) (382 . 384) (#("か" 0 1 (face font-lock-comment-face fontified t)) . -382) (382 . 383) (#("k" 0 1 (face font-lock-comment-face fontified t)) . -382) (380 . 383) nil (377 . 380) (#("第２引数が" 0 5 (face font-lock-comment-face fontified t)) . -377) (377 . 382) (#("だい２ひきすうが" 0 8 (face font-lock-comment-face fontified t)) . -377) (377 . 385) (#("だい２ひきすうg" 0 8 (face font-lock-comment-face fontified t)) . -377) (377 . 385) (#("だい２ひきすう" 0 7 (face font-lock-comment-face fontified t)) . -377) (377 . 384) (#("だい２ひきす" 0 6 (face font-lock-comment-face fontified t)) . -377) (377 . 383) (#("だい２ひきs" 0 6 (face font-lock-comment-face fontified t)) . -377) (377 . 383) (#("だい２ひき" 0 5 (face font-lock-comment-face fontified t)) . -377) (377 . 382) (#("だい２ひk" 0 5 (face font-lock-comment-face fontified t)) . -377) (377 . 382) (#("だい２ひ" 0 4 (face font-lock-comment-face fontified t)) . -377) (377 . 381) (#("だい２h" 0 4 (face font-lock-comment-face fontified t)) . -377) (377 . 381) (#("だい２" 0 3 (face font-lock-comment-face fontified t)) . -377) (377 . 380) (#("だい" 0 2 (face font-lock-comment-face fontified t)) . -377) (377 . 379) (#("だ" 0 1 (face font-lock-comment-face fontified t)) . -377) (377 . 378) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -377) (374 . 378) (#("まず、" 0 3 (face font-lock-comment-face fontified t)) . -374) (374 . 377) (#("まず" 0 2 (face font-lock-comment-face fontified t)) . -374) (374 . 376) (#("まz" 0 2 (face font-lock-comment-face fontified t)) . -374) (374 . 376) (#("ま" 0 1 (face font-lock-comment-face fontified t)) . -374) (374 . 375) (#("m" 0 1 (face font-lock-comment-face fontified t)) . -374) (373 . 375) (#("、" 0 1 (face font-lock-comment-face fontified t)) . -373) (371 . 374) (#("場合" 0 2 (face font-lock-comment-face fontified t)) . -371) (371 . 373) (#("ばあい" 0 3 (face font-lock-comment-face fontified t)) . -371) (371 . 374) (#("ばあ" 0 2 (face font-lock-comment-face fontified t)) . -371) (371 . 373) (#("ば" 0 1 (face font-lock-comment-face fontified t)) . -371) (371 . 372) (#("b" 0 1 (face font-lock-comment-face fontified t)) . -371) (368 . 372) (#("配列の" 0 3 (face font-lock-comment-face fontified t)) . -368) (368 . 371) (#("はいれつの" 0 5 (face font-lock-comment-face fontified t)) . -368) (368 . 373) (#("はいれつn" 0 5 (face font-lock-comment-face fontified t)) . -368) (368 . 373) (#("はいれつ" 0 4 (face font-lock-comment-face fontified t)) . -368) (368 . 372) (#("はいれt" 0 4 (face font-lock-comment-face fontified t)) . -368) (368 . 372) (#("はいれ" 0 3 (face font-lock-comment-face fontified t)) . -368) (368 . 371) (#("はいr" 0 3 (face font-lock-comment-face fontified t)) . -368) (368 . 371) (#("はい" 0 2 (face font-lock-comment-face fontified t)) . -368) (368 . 370) (#("は" 0 1 (face font-lock-comment-face fontified t)) . -368) (368 . 369) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -368) (365 . 369) (#("引数が" 0 3 (face font-lock-comment-face fontified t)) . -365) (365 . 368) (#("ひきすうが" 0 5 (face font-lock-comment-face fontified t)) . -365) (365 . 370) (#("ひきすうg" 0 5 (face font-lock-comment-face fontified t)) . -365) (365 . 370) (#("ひきすう" 0 4 (face font-lock-comment-face fontified t)) . -365) (365 . 369) (#("ひきす" 0 3 (face font-lock-comment-face fontified t)) . -365) (365 . 368) (#("ひきs" 0 3 (face font-lock-comment-face fontified t)) . -365) (365 . 368) (#("ひきs" 0 3 (fontified nil)) . -365) (365 . 368) (#("ひk" 0 2 (face font-lock-comment-face fontified t)) . -365) (365 . 367) (#("ひ" 0 1 (face font-lock-comment-face fontified t)) . -365) (365 . 366) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -365) (363 . 366) (#("第一" 0 2 (face font-lock-comment-face fontified t)) . -363) (363 . 365) (#("だいいち" 0 4 (face font-lock-comment-face fontified t)) . -363) (363 . 367) (#("だいいch" 0 5 (face font-lock-comment-face fontified t)) . -363) (363 . 368) (#("だいいc" 0 4 (face font-lock-comment-face fontified t)) . -363) (363 . 367) (#("だいい" 0 3 (face font-lock-comment-face fontified t)) . -363) (363 . 366) (#("だい" 0 2 (face font-lock-comment-face fontified t)) . -363) (363 . 365) (#("だ" 0 1 (face font-lock-comment-face fontified t)) . -363) (363 . 364) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -363) (360 . 364) nil (356 . 360) nil (355 . 356) nil (532 . 550) nil (524 . 532) nil (#("l" 0 1 (fontified t)) . -524) nil (524 . 525) nil (518 . 524) nil (517 . 518) nil (#("
" 0 1 (fontified t)) . 451) nil (#("      else if (typeof arg2 " 0 6 (fontified t) 6 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 13 (face font-lock-keyword-face fontified t) 13 15 (fontified t) 15 21 (face font-lock-keyword-face fontified t) 21 27 (fontified t)) . 451) nil (465 . 478) nil (457 . 465) nil (451 . 457) nil (450 . 451) (t 20619 . 35528) nil (664 . 666) nil (659 . 664) nil (673 . 674) nil (#(" : arg2" 0 7 (fontified t)) . 673) (t 20619 . 35100) nil (759 . 761) (759 . 760) nil (758 . 759) nil (533 . 534) nil (527 . 528) nil (#("  " 0 2 (fontified nil)) . -526) (528 . 529) nil (526 . 528) 524 nil (354 . 355) (t 20619 . 18765) nil (336 . 339) (t 20619 . 18490) nil (669 . 673) nil (#("fn" 0 2 (fontified t)) . 669) nil (661 . 665) nil (#("fn" 0 2 (fontified t)) . 661) nil (631 . 635) nil (#("fn" 0 2 (fontified t)) . 631) nil (512 . 513) nil (511 . 512) nil (506 . 511) nil (500 . 506) nil (492 . 500) nil (491 . 492) nil (458 . 461) nil (487 . 488) nil (472 . 487) nil (466 . 472) nil (#("a" 0 1 (fontified t)) . -466) nil (#("r" 0 1 (fontified t)) . -467) nil (458 . 468) nil (#("'" 0 1 (fontified t face font-lock-string-face)) . -458) nil (#("t" 0 1 (fontified t face font-lock-string-face)) . -459) nil (458 . 460) nil (#("o" 0 1 (fontified t)) . -458) nil (#("b" 0 1 (fontified t)) . -459) nil (#("j" 0 1 (fontified t)) . -460) nil (458 . 461) nil (#("(" 0 1 (fontified t)) . -458) nil (458 . 459) nil (457 . 458) nil (#("
" 0 1 (fontified t)) . 447) nil (#("        obj[i]();" 0 17 (fontified t)) . 447) nil (433 . 437) nil (#("fn" 0 2 (fontified t)) . 433) nil (432 . 433) (#("        " 0 8 (fontified nil)) . 432) (#("
" 0 1 (fontified t)) . -432) nil (nil rear-nonsticky nil 452 . 453) (nil fontified nil 452 . 453) (nil fontified nil 433 . 452) (433 . 453) nil (#("
" 0 1 (fontified t)) . 462) nil (#("        fn(obj[i]);" 0 19 (fontified t)) . 462) nil (431 . 432) nil (415 . 431) nil (#(")" 0 1 (fontified t)) . -415) nil (405 . 412) nil (405 . 408) nil (#("/" 0 1 (fontified t)) . 250) nil (#("*" 0 1 (fontified t)) . 250) nil (#("]" 0 1 (fontified t)) . 250) nil (#("/* [, args" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 10 (fontified t face font-lock-comment-face)) . 250) nil (249 . 250) nil (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -249) nil (246 . 250) nil (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . 246) nil (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . 246) nil (#("1" 0 1 (fontified t)) . 416) nil (#(" " 0 1 (fontified t)) . 416) nil (#("=" 0 1 (fontified t)) . 416) nil (#("=" 0 1 (fontified t)) . 416) nil (#("=" 0 1 (fontified t)) . 416) nil (#(" " 0 1 (fontified t)) . 416) nil (#(".length" 0 7 (fontified t)) . 416) nil (#("arguments" 0 9 (fontified t face font-lock-constant-face)) . 416) (t 20619 . 18245) nil (722 . 723) nil (717 . 719) 718 nil (680 . 688) (#("      " 0 6 (fontified t)) . 680) 693 nil (647 . 649) 654 nil (586 . 588) 591 nil (534 . 536) 537 nil (#("{" 0 1 (fontified t)) . -502) nil (506 . 508) 512 nil (502 . 503) nil (497 . 502) nil (495 . 497) nil (494 . 495) nil (#("
" 0 1 (fontified t)) . 495) nil (494 . 495) nil (489 . 493) (489 . 490) nil (488 . 489) nil (487 . 488) nil (486 . 487) nil (479 . 486) nil (477 . 479) nil (469 . 477) nil (468 . 469) nil (464 . 468) nil (458 . 464) nil (457 . 458) nil (404 . 405) nil (403 . 404) nil (454 . 455) nil (453 . 454) nil (452 . 453) nil (446 . 452) nil (438 . 446) nil (437 . 438) nil (436 . 437) nil (433 . 436) nil (413 . 433) nil (410 . 413) nil (404 . 410) nil (403 . 404) nil (402 . 403) nil (397 . 402) nil (382 . 397) nil (#("    
" 0 5 (fontified t)) . 363) nil (363 . 367) nil (362 . 363) nil (#("{" 0 1 (fontified t)) . -362) nil (382 . 383) nil (372 . 382) nil (368 . 372) nil (364 . 368) nil (363 . 364) nil (362 . 363) nil (361 . 362) nil (360 . 361) nil (359 . 360) nil (355 . 359) nil (346 . 355) nil (343 . 346) nil (341 . 343) nil (340 . 341) (t 20617 . 18722) nil (541 . 542) nil (540 . 541) nil (536 . 540) nil (#("[key].concat(args));" 0 20 (fontified t)) . 536) nil (339 . 340) nil (338 . 339) nil (335 . 338) nil (326 . 335) nil (#("A" 0 1 (fontified t)) . -326) nil (325 . 327) nil (315 . 325) nil (#("(arguments.length > 2) arguments[2] : [];" 0 1 (fontified t) 1 10 (face font-lock-constant-face fontified t) 10 23 (fontified t) 23 32 (face font-lock-constant-face fontified t) 32 41 (fontified t)) . 315) nil (#(" " 0 1 (face font-lock-comment-face fontified t)) . 254) nil (#("Array" 0 5 (face font-lock-comment-face fontified t)) . 254) (t 20617 . 18019) nil (575 . 576) nil (570 . 575) nil (563 . 570) nil (562 . 563) (558 . 559) nil (361 . 362) nil (357 . 361) nil (356 . 357) nil (343 . 356) nil (342 . 343) nil (326 . 342) nil (#("n" 0 1 (fontified t)) . -326) nil (321 . 327) nil (310 . 321) nil (490 . 495) nil (#("call" 0 4 (fontified t)) . 490) nil (308 . 310) nil (#("
" 0 1 (fontified t)) . 308) nil (#("  if (arguments.length > 2) " 0 2 (fontified t) 2 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t) 6 15 (face font-lock-constant-face fontified t) 15 28 (fontified t)) . 308) nil (331 . 334) nil (#("=== 3" 0 5 (fontified t)) . 331) nil (254 . 260) nil (331 . 332) nil (330 . 331) nil (325 . 330) nil (#("> 2) {" 0 6 (fontified t)) . 325) nil (#("    if (" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 8 (fontified t)) . 332) nil (339 . 340) nil (336 . 339) nil (332 . 336) nil (331 . 332) nil (330 . 331) nil (329 . 330) nil (328 . 329) nil (327 . 328) nil (307 . 327) nil (304 . 307) nil (302 . 304) nil (#("  var args = a" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 14 (fontified t)) . 302) nil (312 . 316) nil (304 . 312) nil (302 . 304) nil (301 . 302) nil (300 . 301) nil (287 . 300) nil (267 . 287) nil (265 . 267) nil (264 . 265) nil (259 . 261) nil (#("}" 0 1 (face font-lock-comment-face fontified t)) . -259) nil (259 . 260) nil (252 . 259) nil (251 . 252) nil (#("," 0 1 (face font-lock-comment-face fontified t)) . -251) nil (251 . 252) nil (248 . 251) nil (#(", args" 0 2 (fontified t) 2 6 (face font-lock-variable-name-face fontified t)) . 248) nil (248 . 254) (t 20616 . 1241) nil (428 . 429) (t 20615 . 64367) nil (366 . 368) (t 20615 . 64351) nil (423 . 425) 446 nil (417 . 418) nil (400 . 417) nil (#("n" 0 1 (fontified t)) . -400) nil (391 . 401) nil (388 . 391) nil (384 . 388) nil (383 . 384) nil (379 . 383) nil (378 . 379) nil (374 . 378) nil (365 . 374) nil (364 . 365) nil (341 . 342) nil (351 . 363) nil (331 . 351) nil (327 . 331) nil (#("    if (typeof " 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t)) . 327) nil (334 . 342) nil (331 . 334) nil (327 . 331) nil (326 . 327) nil (325 . 326) nil (316 . 325) nil (315 . 316) nil (300 . 315) nil (284 . 300) nil (281 . 284) nil (277 . 281) nil (276 . 277) nil (305 . 307) (305 . 306) nil (304 . 305) nil (275 . 276) nil (#("
" 0 1 (fontified t)) . 252) nil (#("  if (typeof fn" 0 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 6 (fontified t) 6 12 (fontified t face font-lock-keyword-face) 12 15 (fontified t)) . 252) nil (257 . 267) nil (254 . 257) nil (#("f" 0 1 (fontified t)) . -254) nil (#("i" 0 1 (fontified t)) . -255) nil (#(" " 0 1 (fontified t)) . -256) nil (254 . 257) nil (252 . 254) nil (251 . 252) (t 20615 . 63347) nil (363 . 364) nil (#("R" 0 1 (face font-lock-string-face fontified t)) . -363) (t 20615 . 63340) nil (359 . 372) (t 20615 . 45291) nil (1044 . 1047) (t 20615 . 26084) nil (#("ion" 0 3 (fontified t)) . 316) (t 20615 . 25484) nil (382 . 383) nil (381 . 382) nil (378 . 381) (374 . 376) nil (#("o" 0 1 (fontified t)) . -374) nil (#("f" 0 1 (fontified t)) . -375) nil (377 . 378) nil (374 . 377) nil (339 . 344) nil (#(" " 0 1 (fontified t)) . 332) nil (#("," 0 1 (fontified t)) . 332) nil (#("obj" 0 3 (fontified t face font-lock-variable-name-face)) . 332) (t 20615 . 25462) nil (390 . 391) nil (389 . 390) nil (385 . 389) nil (374 . 385) nil (372 . 374) nil (371 . 372) nil (#("
" 0 1 (fontified t)) . 372) nil (#("  console" 0 9 (fontified t)) . 372) nil (374 . 381) nil (372 . 374) nil (371 . 372) nil (335 . 337) nil (332 . 335) nil (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -332) nil (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -333) nil (332 . 334) nil (#("
" 0 1 (fontified t)) . 367) nil (#("  console.dir(this);" 0 14 (fontified t) 14 18 (fontified t face font-lock-constant-face) 18 20 (fontified t)) . 367) (t 20615 . 21798) nil (389 . 390) nil (#("
" 0 1 (fontified t)) . 390) nil (#("  " 0 2 (fontified nil)) . -388) (390 . 391) nil (365 . 366) nil (364 . 365) nil (356 . 364) nil (345 . 356) nil (343 . 345) nil (342 . 343) nil (#("d" 0 1 (fontified t)) . -366) nil (#("o" 0 1 (fontified t face font-lock-keyword-face)) . -367) nil (366 . 368) nil (364 . 366) nil (363 . 364) nil (362 . 363) nil (361 . 362) nil (356 . 361) nil (345 . 356) nil (343 . 345) nil (342 . 343) nil (341 . 342) nil (340 . 341) nil (339 . 340) nil (333 . 339) nil (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -333) nil (331 . 334) nil (312 . 331) nil (#("e" 0 1 (fontified t)) . -312) nil (311 . 313) nil (#("c" 0 1 (fontified t)) . -311) nil (307 . 312) nil (307 . 308) nil (306 . 307) (t 20615 . 21426) nil (#("6" 0 1 (fontified t)) . -6561) nil (#("4" 0 1 (fontified t)) . -6562) nil (6561 . 6563) (t 20615 . 15462) nil (304 . 305) nil (#("  }" 0 2 (fontified t) 2 3 (fontified t js--pend (nil 0 function 218 ("MY" "foreach") 305))) . 304) nil (#("{" 0 1 (fontified t)) . -275) nil (305 . 307) (305 . 306) nil (304 . 305) nil (303 . 304) nil (302 . 303) nil (284 . 288) nil (#("apply" 0 5 (fontified t)) . 284) nil (298 . 303) nil (#(")" 0 1 (fontified t)) . -298) nil (298 . 299) nil (293 . 298) nil (#("@" 0 1 (fontified t)) . -293) nil (293 . 294) nil (#("." 0 1 (fontified t)) . -293) nil (#("k" 0 1 (fontified t)) . -294) nil (#("e" 0 1 (fontified t)) . -295) nil (#("y" 0 1 (fontified t)) . -296) nil (289 . 297) nil (281 . 289) nil (244 . 248) nil (273 . 277) nil (272 . 273) nil (271 . 272) nil (270 . 271) nil (#(";" 0 1 (fontified t)) . -270) nil (270 . 271) nil (269 . 270) nil (254 . 269) nil (250 . 254) nil (248 . 250) nil (241 . 244) (244 . 245) nil (243 . 244) nil (242 . 243) nil (241 . 242) nil (240 . 241) nil (238 . 240) nil (218 . 238) nil (219 . 220) nil (218 . 219) nil (217 . 218) (t 20613 . 65297) nil (672 . 673) nil (#("  " 0 2 (fontified t)) . -671) 674 nil (221 . 229) nil (#("IteratableObject" 0 16 (fontified t)) . 221) nil (237 . 249) nil (218 . 221) nil (#(">" 0 1 (fontified t)) . -218) nil (#("Y" 0 1 (fontified t)) . -219) nil (218 . 220) nil (#(" " 0 1 (fontified t)) . 218) nil (#("  function" 0 2 (fontified t) 2 10 (face font-lock-keyword-face fontified t)) . 218) nil (679 . 680) nil (nil rear-nonsticky nil 678 . 679) (nil fontified nil 678 . 679) (nil fontified nil 677 . 678) (nil fontified nil 673 . 677) (nil fontified nil 672 . 673) (nil fontified nil 658 . 672) (nil fontified nil 644 . 658) (nil fontified nil 640 . 644) (nil fontified nil 613 . 640) (nil fontified nil 603 . 613) (nil fontified nil 591 . 603) (nil fontified nil 585 . 591) (nil fontified nil 583 . 585) (nil fontified nil 581 . 583) (nil fontified nil 580 . 581) (nil fontified nil 576 . 580) (nil fontified nil 552 . 576) (nil fontified nil 548 . 552) (nil fontified nil 528 . 548) (nil fontified nil 524 . 528) (nil fontified nil 510 . 524) (nil fontified nil 502 . 510) (nil fontified nil 490 . 502) (nil fontified nil 484 . 490) (nil fontified nil 482 . 484) (nil fontified nil 480 . 482) (nil fontified nil 466 . 480) (nil fontified nil 458 . 466) (nil fontified nil 448 . 458) (nil fontified nil 444 . 448) (nil fontified nil 443 . 444) (nil fontified nil 437 . 443) (nil fontified nil 435 . 437) (nil fontified nil 433 . 435) (nil fontified nil 423 . 433) (nil fontified nil 419 . 423) (nil fontified nil 418 . 419) (nil fontified nil 416 . 418) (nil fontified nil 415 . 416) (nil fontified nil 412 . 415) (nil fontified nil 411 . 412) (nil fontified nil 408 . 411) (nil fontified nil 406 . 408) (nil fontified nil 403 . 406) (nil fontified nil 392 . 403) (nil fontified nil 383 . 392) (nil fontified nil 380 . 383) (nil fontified nil 374 . 380) (nil fontified nil 373 . 374) (nil fontified nil 370 . 373) (nil fontified nil 358 . 370) (nil fontified nil 349 . 358) (nil fontified nil 335 . 349) (nil fontified nil 331 . 335) (nil fontified nil 330 . 331) (nil fontified nil 327 . 330) (nil fontified nil 313 . 327) (nil fontified nil 304 . 313) (nil fontified nil 295 . 304) (nil fontified nil 290 . 295) (nil fontified nil 289 . 290) (nil fontified nil 286 . 289) (nil fontified nil 279 . 286) (nil fontified nil 278 . 279) (nil fontified nil 274 . 278) (nil fontified nil 266 . 274) (nil fontified nil 258 . 266) (nil fontified nil 254 . 258) (nil fontified nil 249 . 254) (nil fontified nil 248 . 249) (nil fontified nil 245 . 248) (nil fontified nil 229 . 245) (nil fontified nil 228 . 229) (nil fontified nil 220 . 228) (nil fontified nil 218 . 220) (218 . 679) (t 20611 . 46995)))
